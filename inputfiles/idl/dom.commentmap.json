{
    "nonelementparentnode-getelementbyid": "Returns the first element within node's descendants whose ID is elementId.",
    "parentnode-children": "Returns the child elements.",
    "parentnode-firstelementchild": "Returns the first child that is an element, and null otherwise.",
    "parentnode-lastelementchild": "Returns the last child that is an element, and null otherwise.",
    "parentnode-prepend": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "parentnode-append": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "parentnode-replacechildren": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "parentnode-queryselector": "Returns the first element that is a descendant of node that matches selectors.",
    "parentnode-queryselectorall": "Returns all element descendants of node that match selectors.",
    "nondocumenttypechildnode-previouselementsibling": "Returns the first preceding sibling that is an element, and null otherwise.",
    "nondocumenttypechildnode-nextelementsibling": "Returns the first following sibling that is an element, and null otherwise.",
    "childnode-before": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "childnode-after": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "childnode-replacewith": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "childnode-remove": "Removes node.",
    "mutationobserver-mutationobserver": "Constructs a MutationObserver object and sets its callback to callback. The callback is invoked with a list of MutationRecord objects as first argument and the constructed MutationObserver object as second argument. It is invoked after nodes registered with the observe() method, are mutated.",
    "mutationobserverinit-childlist": "Set to true if mutations to target's children are to be observed.",
    "mutationobserverinit-attributes": "Set to true if mutations to target's attributes are to be observed. Can be omitted if attributeOldValue or attributeFilter is specified.",
    "mutationobserverinit-characterdata": "Set to true if mutations to target's data are to be observed. Can be omitted if characterDataOldValue is specified.",
    "mutationobserverinit-subtree": "Set to true if mutations to not just target, but also target's descendants are to be observed.",
    "mutationobserverinit-attributeoldvalue": "Set to true if attributes is true or omitted and target's attribute value before the mutation needs to be recorded.",
    "mutationobserverinit-characterdataoldvalue": "Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded.",
    "mutationobserverinit-attributefilter": "Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted.",
    "node-element_node": "node is an element.",
    "node-text_node": "node is a Text node.",
    "node-cdata_section_node": "node is a CDATASection node.",
    "node-processing_instruction_node": "node is a ProcessingInstruction node.",
    "node-comment_node": "node is a Comment node.",
    "node-document_node": "node is a document.",
    "node-document_type_node": "node is a doctype.",
    "node-document_fragment_node": "node is a DocumentFragment node.",
    "node-document_position_disconnected": "Set when node and other are not in the same tree.",
    "node-document_position_preceding": "Set when other is preceding node.",
    "node-document_position_following": "Set when other is following node.",
    "node-document_position_contains": "Set when other is an ancestor of node.",
    "node-document_position_contained_by": "Set when other is a descendant of node."
}
