{
    "nonelementparentnode-getelementbyid": "Returns the first element within node's descendants whose ID is elementId.",
    "parentnode-children": "Returns the child elements.",
    "parentnode-firstelementchild": "Returns the first child that is an element, and null otherwise.",
    "parentnode-lastelementchild": "Returns the last child that is an element, and null otherwise.",
    "parentnode-prepend": "Inserts nodes before the first child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "parentnode-append": "Inserts nodes after the last child of node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "parentnode-replacechildren": "Replace all children of node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "parentnode-queryselector": "Returns the first element that is a descendant of node that matches selectors.",
    "parentnode-queryselectorall": "Returns all element descendants of node that match selectors.",
    "nondocumenttypechildnode-previouselementsibling": "Returns the first preceding sibling that is an element, and null otherwise.",
    "nondocumenttypechildnode-nextelementsibling": "Returns the first following sibling that is an element, and null otherwise.",
    "childnode-before": "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "childnode-after": "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "childnode-replacewith": "Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.\n\nThrows a \"HierarchyRequestError\" DOMException if the constraints of the node tree are violated.",
    "childnode-remove": "Removes node.",
    "mutationobserver-mutationobserver": "Constructs a MutationObserver object and sets its callback to callback. The callback is invoked with a list of MutationRecord objects as first argument and the constructed MutationObserver object as second argument. It is invoked after nodes registered with the observe() method, are mutated.",
    "mutationobserver-observe": "Instructs the user agent to observe a given target (a node) and report any mutations based on the criteria given by options (an object).\n\nThe options argument allows for setting mutation observation options via object members. These are the object members that can be used:",
    "mutationobserver-disconnect": "Stops observer from observing any mutations. Until the observe() method is used again, observer's callback will not be invoked.",
    "mutationobserver-takerecords": "Empties the record queue and returns what was in there.",
    "mutationrecord-type": "Returns \"attributes\" if it was an attribute mutation. \"characterData\" if it was a mutation to a CharacterData node. And \"childList\" if it was a mutation to the tree of nodes.",
    "mutationrecord-addednodes": "Return the nodes added and removed respectively.",
    "mutationrecord-removednodes": "Return the nodes added and removed respectively.",
    "mutationrecord-previoussibling": "Return the previous and next sibling respectively of the added or removed nodes, and null otherwise.",
    "mutationrecord-nextsibling": "Return the previous and next sibling respectively of the added or removed nodes, and null otherwise.",
    "mutationrecord-attributename": "Returns the local name of the changed attribute, and null otherwise.",
    "mutationrecord-attributenamespace": "Returns the namespace of the changed attribute, and null otherwise.",
    "mutationrecord-oldvalue": "The return value depends on type. For \"attributes\", it is the value of the changed attribute before the change. For \"characterData\", it is the data of the changed node before the change. For \"childList\", it is null.",
    "node-haschildnodes": "Returns whether node has children.",
    "node-childnodes": "Returns the children.",
    "node-firstchild": "Returns the first child.",
    "node-lastchild": "Returns the last child.",
    "node-previoussibling": "Returns the previous sibling.",
    "node-nextsibling": "Returns the next sibling.",
    "node-normalize": "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes.",
    "node-isequalnode": "Returns whether node and otherNode have the same properties.",
    "text-splittext": "Splits data at the given offset and returns the remainder as Text node.",
    "text-wholetext": "Returns the combined data of all direct Text node siblings.",
    "range-commonancestorcontainer": "Returns the node, furthest away from the document, that is an ancestor of both range's start node and end node.",
    "domtokenlist-value": "Returns the associated set as string.\n\nCan be set, to change the associated attribute.",
    "mutationobserverinit-childlist": "Set to true if mutations to target's children are to be observed.",
    "mutationobserverinit-attributes": "Set to true if mutations to target's attributes are to be observed. Can be omitted if attributeOldValue or attributeFilter is specified.",
    "mutationobserverinit-characterdata": "Set to true if mutations to target's data are to be observed. Can be omitted if characterDataOldValue is specified.",
    "mutationobserverinit-subtree": "Set to true if mutations to not just target, but also target's descendants are to be observed.",
    "mutationobserverinit-attributeoldvalue": "Set to true if attributes is true or omitted and target's attribute value before the mutation needs to be recorded.",
    "mutationobserverinit-characterdataoldvalue": "Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded.",
    "mutationobserverinit-attributefilter": "Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted.",
    "node-element_node": "node is an element.",
    "node-text_node": "node is a Text node.",
    "node-cdata_section_node": "node is a CDATASection node.",
    "node-processing_instruction_node": "node is a ProcessingInstruction node.",
    "node-comment_node": "node is a Comment node.",
    "node-document_node": "node is a document.",
    "node-document_type_node": "node is a doctype.",
    "node-document_fragment_node": "node is a DocumentFragment node.",
    "node-document_position_disconnected": "Set when node and other are not in the same tree.",
    "node-document_position_preceding": "Set when other is preceding node.",
    "node-document_position_following": "Set when other is following node.",
    "node-document_position_contains": "Set when other is an ancestor of node.",
    "node-document_position_contained_by": "Set when other is a descendant of node."
}
